field = [[["r", 4], ["b", 1], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]],
         [["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0], ["n", 0]]]



move = 1


def move(place1, place2):
    global field
    fplace1 = field[place1[0]][place1[1]]
    fplace2 = field[place2[0]][place2[1]]
    if fplace1[1] >= 2 and fplace2[0] == "n":
        fplace2[1] = fplace1[1] - 1
        fplace2[0] = fplace1[0]
        fplace1[1] = 1
    elif fplace1[1] >= 2 and fplace1[0] != fplace2[0]:
        if fplace2[1] > fplace1[1] - 1:
            fplace2[1] -= fplace1[1] - 1
            fplace1[1] = 1
        elif fplace2[1] < fplace1[1] - 1:
            fplace2[1] = fplace1[1] - 1
            fplace1[1] = 1
            fplace2[0] = fplace1[0]
        elif fplace2[1] == fplace1[1] - 1:
            fplace2[1] = 1
            fplace1[1] = 1
        else:
            return True


def add_numb(place, numb):
    if place[1] <= 7 and numb > 0:
        place[1] += 1
